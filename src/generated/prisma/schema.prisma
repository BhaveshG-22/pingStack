generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EmailSchedules EmailSchedule[]
  leads          Lead[]
  groups         Group[]
  smtpConfigs    SMTPConfig[]
}

model EmailSchedule {
  id        String @id @default(cuid())
  dayOfWeek Days
  time      String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
}

model Group {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  leads     Lead[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId]) // Ensure unique group names per user
}

model Lead {
  id        String     @id @default(cuid())
  name      String
  email     String
  company   String
  status    LeadStatus @default(CONTACTED)
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  group     Group?     @relation(fields: [groupId], references: [id])
  groupId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum LeadStatus {
  CONTACTED
  RESPONDED
  SCHEDULED
  CLOSED
}

enum Days {
  Mon @map("Monday")
  Tue @map("Tuesday")
  Wed @map("Wednesday")
  Thu @map("Thursday")
  Fri @map("Friday")
  Sat @map("Saturday")
  Sun @map("Sunday")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model SMTPConfig {
  id        String   @id @default(cuid())
  provider  String // 'gmail', 'outlook', 'custom'
  email     String
  host      String?
  port      Int?
  secure    Boolean  @default(true)
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, userId]) // One config per email per user
}
